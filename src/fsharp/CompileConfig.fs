// Copyright (c) Microsoft Corporation.  All Rights Reserved.  See License.txt in the project root for license information.

namespace Microsoft.FSharp.Compiler.Configurations

open System
open System.Collections.Generic
open System.Diagnostics
open System.IO
open System.Text

open Internal.Utilities.Filename

open Microsoft.FSharp.Compiler.AbstractIL 
open Microsoft.FSharp.Compiler.AbstractIL.IL 
open Microsoft.FSharp.Compiler.AbstractIL.ILBinaryReader
open Microsoft.FSharp.Compiler.AbstractIL.Internal.Library 

open Microsoft.FSharp.Compiler 
open Microsoft.FSharp.Compiler.ErrorLogger
open Microsoft.FSharp.Compiler.Range

#if !NO_EXTENSIONTYPING
open Microsoft.FSharp.Compiler.ExtensionTyping
open Microsoft.FSharp.Core.CompilerServices
#endif

//----------------------------------------------------------------------------

/// Represents the file or string used for the --version flag
type VersionFlag = 
    | VersionString of string
    | VersionFile of string
    | VersionNone
    member x.GetVersionInfo(implicitIncludeDir) =
        let vstr = x.GetVersionString(implicitIncludeDir)
        try 
            IL.parseILVersion vstr
        with _ -> errorR(Error(FSComp.SR.buildInvalidVersionString(vstr), rangeStartup)); IL.parseILVersion "0.0.0.0"

    member x.GetVersionString(implicitIncludeDir) = 
            match x with 
            | VersionString s -> s
            | VersionFile s ->
                let s = if FileSystem.IsPathRootedShim(s) then s else Path.Combine(implicitIncludeDir, s)
                if not(FileSystem.SafeExists(s)) then 
                    errorR(Error(FSComp.SR.buildInvalidVersionFile(s), rangeStartup)); "0.0.0.0"
                else
                    use is = System.IO.File.OpenText s
                    is.ReadLine()
            | VersionNone -> "0.0.0.0"

[<RequireQualifiedAccess>]
type CompilerTarget = 
    | WinExe 
    | ConsoleExe 
    | Dll 
    | Module
    member x.IsExe = (match x with ConsoleExe | WinExe -> true | _ -> false)

/// Represents a reference to an assembly. May be backed by a real assembly on disk, or a cross-project
/// reference backed by information generated by the the compiler service.
type IRawFSharpAssemblyData = 
    ///  The raw list AutoOpenAttribute attributes in the assembly
    abstract GetAutoOpenAttributes : ILGlobals -> string list
    ///  The raw list InternalsVisibleToAttribute attributes in the assembly
    abstract GetInternalsVisibleToAttributes : ILGlobals  -> string list
    ///  The raw IL module definition in the assembly, if any. This is not present for cross-project references
    /// in the language service
    abstract TryGetILModuleDef : unit -> ILModuleDef option
    ///  The raw F# signature data in the assembly, if any
    abstract GetRawFSharpSignatureData : range * ilShortAssemName: string * fileName: string -> (string * (unit -> byte[])) list
    ///  The raw F# optimization data in the assembly, if any
    abstract GetRawFSharpOptimizationData : range * ilShortAssemName: string * fileName: string -> (string * (unit -> byte[])) list
    ///  The table of type forwarders in the assembly
    abstract GetRawTypeForwarders : unit -> ILExportedTypesAndForwarders
    /// The identity of the module
    abstract ILScopeRef : ILScopeRef
    abstract ILAssemblyRefs : ILAssemblyRef list
    abstract ShortAssemblyName : string
    abstract HasAnyFSharpSignatureDataAttribute : bool
    abstract HasMatchingFSharpSignatureDataAttribute : ILGlobals -> bool

/// Cache of time stamps as we traverse a project description
type TimeStampCache(defaultTimeStamp: DateTime) = 
    let files = Dictionary<string, DateTime>()
    let projects = Dictionary<IProjectReference, DateTime>(HashIdentity.Reference)
    member cache.GetFileTimeStamp fileName = 
        let ok, v = files.TryGetValue(fileName)
        if ok then v else
        let v = 
            try 
                FileSystem.GetLastWriteTimeShim(fileName)
            with 
            | :? FileNotFoundException ->
                defaultTimeStamp   
        files.[fileName] <- v
        v

    member cache.GetProjectReferenceTimeStamp (pr: IProjectReference, ctok) = 
        let ok, v = projects.TryGetValue(pr)
        if ok then v else 
        let v = defaultArg (pr.TryGetLogicalTimeStamp (cache, ctok)) defaultTimeStamp
        projects.[pr] <- v
        v

and IProjectReference = 
    /// The name of the assembly file generated by the project
    abstract FileName : string 

    /// Evaluate raw contents of the assembly file generated by the project
    abstract EvaluateRawContents : CompilationThreadToken -> Cancellable<IRawFSharpAssemblyData option>

    /// Get the logical timestamp that would be the timestamp of the assembly file generated by the project
    ///
    /// For project references this is maximum of the timestamps of all dependent files.
    /// The project is not actually built, nor are any assemblies read, but the timestamps for each dependent file 
    /// are read via the FileSystem.  If the files don't exist, then a default timestamp is used.
    ///
    /// The operation returns None only if it is not possible to create an IncrementalBuilder for the project at all, e.g. if there
    /// are fatal errors in the options for the project.
    abstract TryGetLogicalTimeStamp : TimeStampCache * CompilationThreadToken -> System.DateTime option

type AssemblyReference = 
    | AssemblyReference of range * string * IProjectReference option
    member x.Range = (let (AssemblyReference(m, _, _)) = x in m)
    member x.Text = (let (AssemblyReference(_, text, _)) = x in text)
    member x.ProjectReference = (let (AssemblyReference(_, _, contents)) = x in contents)
    member x.SimpleAssemblyNameIs(name) = 
        (String.Compare(fileNameWithoutExtensionWithValidate false x.Text, name, StringComparison.OrdinalIgnoreCase) = 0) ||
        (let text = x.Text.ToLowerInvariant()
         not (text.Contains "/") && not (text.Contains "\\") && not (text.Contains ".dll") && not (text.Contains ".exe") &&
         try let aname = System.Reflection.AssemblyName(x.Text) in aname.Name = name 
         with _ -> false) 
    override x.ToString() = sprintf "AssemblyReference(%s)" x.Text

type ICompilerConfig =
    abstract member primaryAssembly: PrimaryAssembly
    abstract member autoResolveOpenDirectivesToDlls: bool
    abstract member noFeedback: bool
    abstract member stackReserveSize: int32 option
    abstract member implicitIncludeDir: string
    abstract member openDebugInformationForLaterStaticLinking: bool
    abstract member fsharpBinariesDir: string
    abstract member compilingFslib: bool
    abstract member compilingFslib20: string option
    abstract member compilingFslib40: bool
    abstract member compilingFslibNoBigInt: bool
    abstract member useIncrementalBuilder: bool
    abstract member includes: string list
    abstract member implicitOpens: string list
    abstract member useFsiAuxLib: bool
    abstract member framework: bool
    abstract member implicitlyResolveAssemblies: bool
    abstract member light: bool option
    abstract member conditionalCompilationDefines: string list
    abstract member subsystemVersion: int * int
    abstract member useHighEntropyVA: bool
    abstract member referencedDLLs: AssemblyReference list
    abstract member clrRoot: string option
    abstract member reduceMemoryUsage: ReduceMemoryFlag
    abstract member inputCodePage: int option
    abstract member embedResources: string list
    abstract member errorSeverityOptions: FSharpErrorSeverityOptions
    abstract member mlCompatibility:bool
    abstract member checkOverflow:bool
    abstract member showReferenceResolutions:bool
    abstract member outputFile: string option
    abstract member platform: ILPlatform option
    abstract member prefer32Bit: bool
    abstract member useSimpleResolution: bool
    abstract member target: CompilerTarget
    abstract member debuginfo: bool
    abstract member testFlagEmitFeeFeeAs100001: bool
    abstract member dumpDebugInfo: bool
    abstract member debugSymbolFile: string option
    abstract member typeCheckOnly: bool
    abstract member parseOnly: bool
    abstract member importAllReferencesOnly: bool
    abstract member simulateException: string option
    abstract member printAst: bool
    abstract member targetFrameworkVersion: string
    abstract member tokenizeOnly: bool
    abstract member testInteractionParser: bool
    abstract member reportNumDecls: bool
    abstract member printSignature: bool
    abstract member printSignatureFile: string
    abstract member xmlDocOutputFile: string option
    abstract member stats: bool
    abstract member generateFilterBlocks: bool 
    abstract member signer: string option
    abstract member container: string option
    abstract member delaysign: bool
    abstract member publicsign: bool
    abstract member version: VersionFlag 
    abstract member metadataVersion: string option
    abstract member standalone: bool
    abstract member extraStaticLinkRoots: string list 
    abstract member noSignatureData: bool
    abstract member onlyEssentialOptimizationData: bool
    abstract member useOptimizationDataFile: bool
    abstract member jitTracking: bool
    abstract member portablePDB: bool
    abstract member embeddedPDB: bool
    abstract member embedAllSource: bool
    abstract member embedSourceList: string list
    abstract member sourceLink: string
    abstract member ignoreSymbolStoreSequencePoints: bool
    abstract member internConstantStrings: bool
    abstract member extraOptimizationIterations: int
    abstract member win32res: string 
    abstract member win32manifest: string
    abstract member includewin32manifest: bool
    abstract member linkResources: string list
    abstract member showFullPaths: bool
    abstract member errorStyle: ErrorStyle
    abstract member utf8output: bool
    abstract member flatErrors: bool
    abstract member maxErrors: int
    abstract member baseAddress: int32 option
#if DEBUG
    abstract member showOptimizationData: bool
#endif
    abstract member showTerms: bool 
    abstract member writeTermsToFiles: bool 
    abstract member doDetuple: bool 
    abstract member doTLR: bool 
    abstract member doFinalSimplify: bool
    //abstract member optSettings: Optimizer.OptimizationSettings 
    abstract member emitTailcalls: bool
    abstract member deterministic: bool
    abstract member preferredUiLang: string option
    abstract member lcid: int option
    abstract member optsOn: bool 
    abstract member productNameForBannerText: string
    abstract member showBanner : bool
    abstract member showTimes: bool
    abstract member showLoadedAssemblies: bool
    abstract member continueAfterParseFailure: bool
#if !NO_EXTENSIONTYPING
    abstract member showExtensionTypeMessages: bool
#endif
    abstract member pause: bool 
    abstract member alwaysCallVirt: bool
    abstract member noDebugData: bool
    abstract member isInteractive: bool
    abstract member isInvalidationSupported: bool 
    abstract member translatorDLLs: AssemblyReference list
